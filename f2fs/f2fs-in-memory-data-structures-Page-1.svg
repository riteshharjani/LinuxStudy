<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="729px" height="11141px" version="1.1" content="&lt;mxfile userAgent=&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36&quot; version=&quot;9.1.0&quot; editor=&quot;www.draw.io&quot; type=&quot;github&quot;&gt;&lt;diagram id=&quot;8a04bd27-c7d4-b8be-a1ed-5ec4fec9daae&quot; name=&quot;Page-1&quot;&gt;&lt;/diagram&gt;&lt;diagram id=&quot;6a270a18-b5a4-7b75-ce3c-519482a1e4e7&quot; name=&quot;Page-2&quot;&gt;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&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><defs/><g transform="translate(0.5,0.5)"><rect x="0" y="4980" width="460" height="280" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(6.5,4987.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="439" height="270" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 274px; max-width: 446px; width: 440px; white-space: normal; word-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;"><div style="font-size: 14px"><div style="font-size: 14px"><div style="font-size: 14px"><div style="font-size: 14px"><div style="font-size: 14px"><div style="font-size: 14px"><div style="font-size: 14px"><div style="font-size: 14px"><div style="font-size: 14px"><div style="font-size: 14px"><div style="font-size: 14px"><div><div><div><b> 708 enum inode_type {</b></div><div> 709         DIR_INODE,                      /* for dirty dir inode */</div><div> 710         FILE_INODE,                     /* for dirty regular/symlink inode */</div><div> 711         DIRTY_META,                     /* for all dirtied inode metadata */</div><div> 712         NR_INODE_TYPE,</div><div> 713 };</div></div><div><br /></div> 715 /* for inner inode cache management */</div><div><b> 716 struct inode_management {</b></div><div> 717         struct radix_tree_root ino_root;        /* ino entry array */</div><div> 718         spinlock_t ino_lock;                    /* for ino entry lock */</div><div> 719         struct list_head ino_list;              /* inode list head */</div><div> 720         unsigned long ino_num;                  /* number of entries */</div><div> 721 };</div><div> 722</div><div> 723 /* For s_flag in struct f2fs_sb_info */</div><div><br /></div></div></div></div></div></div></div></div></div></div></div></div></div></div></foreignObject><text x="220" y="142" fill="#000000" text-anchor="middle" font-size="14px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><rect x="0" y="5534" width="510" height="300" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(6.5,5541.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="477" height="294" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 294px; max-width: 496px; width: 478px; white-space: normal; word-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;"><div><div><div><div><div><div><div><div><div><div><div><div><div><div> 644 /*</div><div><b> 645  * For superblock</b></div><div> 646  */</div><div> 647 /*</div><div> 648  * COUNT_TYPE for monitoring</div><div> 649  *</div><div> 650  * f2fs monitors the number of several block types such as on-writeback,</div><div> 651  * dirty dentry blocks, dirty node blocks, and dirty meta blocks.</div><div> 652  */</div><div><b> 653 enum count_type {</b></div><div> 654         F2FS_DIRTY_DENTS,</div><div> 655         F2FS_DIRTY_DATA,</div><div> 656         F2FS_DIRTY_NODES,</div><div> 657         F2FS_DIRTY_META,</div><div> 658         F2FS_INMEM_PAGES,</div><div> 659         F2FS_DIRTY_IMETA,</div><div> 660         NR_COUNT_TYPE,</div><div> 661 };</div></div></div></div></div></div></div></div></div></div></div></div></div></div><div><br /></div></div></div></foreignObject><text x="239" y="154" fill="#000000" text-anchor="middle" font-size="14px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><rect x="0" y="4562" width="510" height="400" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(6.5,4569.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="466" height="394" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 394px; max-width: 496px; width: 467px; white-space: normal; word-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;"><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div> 663 /*</div><div> 664  * The below are the page types of bios used in submit_bio().</div><div> 665  * The available types are:</div><div> 666  * DATA                 User data pages. It operates as async mode.</div><div> 667  * NODE                 Node pages. It operates as async mode.</div><div> 668  * META                 FS metadata pages such as SIT, NAT, CP.</div><div> 669  * NR_PAGE_TYPE         The number of page types.</div><div> 670  * META_FLUSH           Make sure the previous pages are written</div><div> 671  *                      with waiting the bio's completion</div><div> 672  * ...                  Only can be used with META.</div><div> 673  */</div><div> 674 #define PAGE_TYPE_OF_BIO(type)  ((type) &gt; META ? META : (type))</div><div><b> 675 enum page_type {</b></div><div> 676         DATA,</div><div> 677         NODE,</div><div> 678         META,</div><div> 679         NR_PAGE_TYPE,</div><div> 680         META_FLUSH,</div><div> 681         INMEM,          /* the below types are used by tracepoints only. */</div><div> 682         INMEM_DROP,</div><div> 683         INMEM_REVOKE,</div><div> 684         IPU,</div><div> 685         OPU,</div><div> 686 };</div></div></div></div></div></div></div></div></div></div></div></div></div></div></div><div><br /></div></div></div></foreignObject><text x="233" y="204" fill="#000000" text-anchor="middle" font-size="14px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><rect x="2" y="5884" width="540" height="350" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(8.5,5891.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="516" height="318" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 344px; max-width: 526px; width: 517px; white-space: normal; word-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;"><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><b> 688 struct f2fs_io_info {</b></div><div> 689         struct f2fs_sb_info *sbi;       /* f2fs_sb_info pointer */</div><div> 690         enum page_type type;    /* contains DATA/NODE/META/META_FLUSH */</div><div> 691         int op;                 /* contains REQ_OP_ */</div><div> 692         int op_flags;           /* rq_flag_bits */</div><div> 693         block_t new_blkaddr;    /* new block address to be written */</div><div> 694         block_t old_blkaddr;    /* old block address before Cow */</div><div> 695         struct page *page;      /* page to be written */</div><div> 696         struct page *encrypted_page;    /* encrypted page */</div><div> 697 };</div><div> 698</div><div> 699 #define is_read_io(rw) (rw == READ)</div><div><b> 700 struct f2fs_bio_info {</b></div><div> 701         struct f2fs_sb_info *sbi;       /* f2fs superblock */</div><div> 702         struct bio *bio;                /* bios to merge */</div><div> 703         sector_t last_block_in_bio;     /* last block number */</div><div> 704         struct f2fs_io_info fio;        /* store buffered io info. */</div><div> 705         struct rw_semaphore io_rwsem;   /* blocking op for bio */</div><div> 706 };</div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div><div><br /></div></div></div></foreignObject><text x="258" y="166" fill="#000000" text-anchor="middle" font-size="14px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><rect x="0" y="94.5" width="580" height="2479" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(6.5,102.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="565" height="2462" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 2473px; max-width: 566px; width: 566px; white-space: normal; word-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;"><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div> 733 enum {</div><div> 734         CP_TIME,</div><div> 735         REQ_TIME,</div><div> 736         MAX_TIME,</div><div> 737 };</div><div> 738</div><div> 739 #ifdef CONFIG_F2FS_FS_ENCRYPTION</div><div> 740 #define F2FS_KEY_DESC_PREFIX "f2fs:"</div><div> 741 #define F2FS_KEY_DESC_PREFIX_SIZE 5</div><div> 742 #endif</div><div><b> 743 struct f2fs_sb_info {</b></div><div> 744         <b>struct</b> super_block *sb;                 /* pointer to VFS super block */</div><div> 745         <b>struct</b> proc_dir_entry *s_proc;          /* proc entry */</div><div> 746         <b><font color="#cc0000">struct f2fs_super_block</font></b> *raw_super;     /* raw super block pointer */</div><div> 747         int valid_super_block;                  /* valid super block no */</div><div> 748         unsigned long s_flag;                           /* flags for sbi */</div><div> 749</div><div> 750 #ifdef CONFIG_F2FS_FS_ENCRYPTION</div><div> 751         u8 key_prefix[F2FS_KEY_DESC_PREFIX_SIZE];</div><div> 752         u8 key_prefix_size;</div><div> 753 #endif</div><div> 754         /* for node-related operations */</div><div> 755         <b>struct f2fs_nm_info</b> *nm_info;           /* node manager */</div><div> 756         <b>struct</b> inode *node_inode;               /* cache node blocks */</div><div> 757</div><div> 758         /* for segment-related operations */</div><div> 759        <b> struct f2fs_sm_info</b> *sm_info;           /* segment manager */</div><div> 760</div><div> 761         /* for bio operations */</div><div> 762         <b>struct f2fs_bio_info</b> read_io;                   /* for read bios */</div><div> 763        <b> struct f2fs_bio_info</b> write_io[NR_PAGE_TYPE];    /* for write bios */</div><div> 764         <b>struct</b> mutex wio_mutex[NODE + 1];       /* bio ordering for NODE/DATA */</div><div> 765</div><div> 766         /* for checkpoint */</div><div> 767         <b><font color="#ff0000">struct f2fs_checkpoint</font></b> *ckpt;           /* raw checkpoint pointer */</div><div> 768         int cur_cp_pack;                        /* remain current cp pack */</div><div> 769         spinlock_t cp_lock;                     /* for flag in ckpt */</div><div> 770         <b>struct</b> inode *meta_inode;               /* cache meta blocks */</div><div> 771         <b>struct</b> mutex cp_mutex;                  /* checkpoint procedure lock */</div><div> 772         <b>struct</b> rw_semaphore cp_rwsem;           /* blocking FS operations */</div><div> 773         <b>struct</b> rw_semaphore node_write;         /* locking node writes */</div><div> 774         wait_queue_head_t cp_wait;</div><div> 775         unsigned long last_time[MAX_TIME];      /* to store time in jiffies */</div><div> 776         long interval_time[MAX_TIME];           /* to store thresholds */</div><div> 777</div><div> 778         <b>struct inode_management </b>im[MAX_INO_ENTRY];      /* manage inode cache */</div><div> 779</div><div> 780         /* for orphan inode, use 0'th array */</div><div> 781         unsigned int max_orphans;               /* max orphan inodes */</div><div> 782</div><div> 783         /* for inode management */</div><div> 784         <b>struct</b> list_head inode_list[NR_INODE_TYPE];     /* dirty inode list */</div><div> 785         spinlock_t inode_lock[NR_INODE_TYPE];   /* for dirty inode list lock */</div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div><div><div> 786</div><div> 787         /* for extent tree cache */</div><div> 788         <b>struct</b> radix_tree_root extent_tree_root;/* cache extent cache entries */</div><div> 789         <b>struct</b> rw_semaphore extent_tree_lock;   /* locking extent radix tree */</div><div> 790         <b>struct</b> list_head extent_list;           /* lru list for shrinker */</div><div> 791         spinlock_t extent_lock;                 /* locking extent lru list */</div><div> 792         atomic_t total_ext_tree;                /* extent tree count */</div><div> 793         struct list_head zombie_list;           /* extent zombie tree list */</div><div> 794         atomic_t total_zombie_tree;             /* extent zombie tree count */</div><div> 795         atomic_t total_ext_node;                /* extent info count */</div><div> 796</div><div> 797         /* basic filesystem units */</div><div> 798         unsigned int log_sectors_per_block;     /* log2 sectors per block */</div><div> 799         unsigned int log_blocksize;             /* log2 block size */</div><div> 800         unsigned int blocksize;                 /* block size */</div><div> 801         unsigned int root_ino_num;              /* root inode number*/</div><div> 802         unsigned int node_ino_num;              /* node inode number*/</div><div> 803         unsigned int meta_ino_num;              /* meta inode number*/</div><div> 804         unsigned int log_blocks_per_seg;        /* log2 blocks per segment */</div><div> 805         unsigned int blocks_per_seg;            /* blocks per segment */</div><div> 806         unsigned int segs_per_sec;              /* segments per section */</div><div> 807         unsigned int secs_per_zone;             /* sections per zone */</div><div> 808         unsigned int total_sections;            /* total section count */</div><div> 809         unsigned int total_node_count;          /* total node block count */</div><div> 810         unsigned int total_valid_node_count;    /* valid node block count */</div><div> 811         loff_t max_file_blocks;                 /* max block index of file */</div><div> 812         int active_logs;                        /* # of active logs */</div><div> 813         int dir_level;                          /* directory level */</div><div> 814</div><div> 815         block_t user_block_count;               /* # of user blocks */</div><div> 816         block_t total_valid_block_count;        /* # of valid blocks */</div><div> 817         block_t discard_blks;                   /* discard command candidats */</div><div> 818         block_t last_valid_block_count;         /* for recovery */</div><div> 819         u32 s_next_generation;                  /* for NFS support */</div><div> 820         atomic_t nr_wb_bios;                    /* # of writeback bios */</div><div> 821</div><div> 822         /* # of pages, see count_type */</div><div> 823         atomic_t nr_pages[NR_COUNT_TYPE];</div><div> 824         /* # of allocated blocks */</div><div> 825         <b>struct</b> percpu_counter alloc_valid_block_count;</div><div> 826</div><div> 827         /* valid inode count */</div><div> 828         <b>struct</b> percpu_counter total_valid_inode_count;</div><div> 829</div><div> 830         <b>struct f2fs_mount_info</b> mount_opt;       /* mount options */</div><div> 831</div><div> 832         /* for cleaning operations */</div><div> 833         struct mutex gc_mutex;                  /* mutex for GC */</div><div> 834         <b>struct f2fs_gc_kthread </b> *gc_thread;     /* GC thread */</div><div> 835         unsigned int cur_victim_sec;            /* current victim section num */</div><div> 836</div><div> 837         /* threshold for converting bg victims for fg */</div><div> 838         u64 fggc_threshold;</div><div> 839</div></div><div><div> 840         /* maximum # of trials to find a victim segment for SSR and GC */</div><div> 841         unsigned int max_victim_search;</div><div> 842</div><div> 843         /*</div><div> 844          * for stat information.</div><div> 845          * one is for the LFS mode, and the other is for the SSR mode.</div><div> 846          */</div><div> 847 #ifdef CONFIG_F2FS_STAT_FS</div><div> 848         <b>struct f2fs_stat_info</b> *stat_info;       /* FS status information */</div><div> 849         unsigned int segment_count[2];          /* # of allocated segments */</div><div> 850         unsigned int block_count[2];            /* # of allocated blocks */</div><div> 851         atomic_t inplace_count;         /* # of inplace update */</div><div> 852         atomic64_t total_hit_ext;               /* # of lookup extent cache */</div><div> 853         atomic64_t read_hit_rbtree;             /* # of hit rbtree extent node */</div><div> 854         atomic64_t read_hit_largest;            /* # of hit largest extent node */</div><div> 855         atomic64_t read_hit_cached;             /* # of hit cached extent node */</div><div> 856         atomic_t inline_xattr;                  /* # of inline_xattr inodes */</div><div> 857         atomic_t inline_inode;                  /* # of inline_data inodes */</div><div> 858         atomic_t inline_dir;                    /* # of inline_dentry inodes */</div><div> 859         int bg_gc;                              /* background gc calls */</div><div> 860         unsigned int ndirty_inode[NR_INODE_TYPE];       /* # of dirty inodes */</div><div> 861 #endif</div><div> 862         unsigned int last_victim[2];            /* last victim segment # */</div><div> 863         spinlock_t stat_lock;                   /* lock for stat operations */</div><div> 864</div><div> 865         /* For sysfs suppport */</div><div> 866         <b>struct</b> kobject s_kobj;</div><div> 867         <b>struct</b> completion s_kobj_unregister;</div><div> 868</div><div> 869         /* For shrinker support */</div><div> 870         <b>struct</b> list_head s_list;</div><div> 871         <b>struct</b> mutex umount_mutex;</div><div> 872         unsigned int shrinker_run_no;</div><div> 873</div><div> 874         /* For write statistics */</div><div> 875         u64 sectors_written_start;</div><div> 876         u64 kbytes_written;</div><div> 877</div><div> 878         /* Reference to checksum algorithm driver via cryptoapi */</div><div> 879        <b> struct crypto_shash</b> *s_chksum_driver;</div><div> 880</div><div> 881         /* For fault injection */</div><div> 882 #ifdef CONFIG_F2FS_FAULT_INJECTION</div><div> 883         <b>struct f2fs_fault_info</b> fault_info;</div><div> 884 #endif</div><div> 885 };</div></div><div><br /></div></div></div></foreignObject><text x="283" y="1238" fill="#000000" text-anchor="middle" font-size="14px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><rect x="0" y="2600" width="580" height="614" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(6.5,2607.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="500" height="606" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 608px; max-width: 566px; width: 501px; white-space: normal; word-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;"><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><b> 606 struct f2fs_sm_info {</b></div><div> 607         <b>struct sit_info</b> *sit_info;              /* whole segment information */</div><div> 608        <b> struct free_segmap_info</b> *free_info;     /* free segment information */</div><div> 609         <b>struct dirty_seglist_info</b> *dirty_info;  /* dirty segment information */</div><div> 610         <b>struct curseg_info</b> *curseg_array;       /* active segment information */</div><div> 611</div><div> 612         block_t seg0_blkaddr;           /* block address of 0'th segment */</div><div> 613         block_t main_blkaddr;           /* start block address of main area */</div><div> 614         block_t ssa_blkaddr;            /* start block address of SSA area */</div><div> 615</div><div> 616         unsigned int segment_count;     /* total # of segments */</div><div> 617         unsigned int main_segments;     /* # of segments in main area */</div><div> 618         unsigned int reserved_segments; /* # of reserved segments */</div><div> 619         unsigned int ovp_segments;      /* # of overprovision segments */</div><div> 620</div><div> 621         /* a threshold to reclaim prefree segments */</div><div> 622         unsigned int rec_prefree_segments;</div><div> 623</div><div> 624         /* for small discard management */</div><div> 625         <b>struct</b> list_head discard_list;          /* 4KB discard list */</div><div> 626         <b>struct</b> list_head wait_list;             /* linked with issued discard bio */</div><div> 627         int nr_discards;                        /* # of discards in the list */</div><div> 628         int max_discards;                       /* max. discards to be issued */</div><div> 629</div><div> 630         /* for batched trimming */</div><div> 631         unsigned int trim_sections;             /* # of sections to trim */</div><div> 632</div><div> 633         <b>struct</b> list_head sit_entry_set; /* sit entry set list */</div><div> 634</div><div> 635         unsigned int ipu_policy;        /* in-place-update policy */</div><div> 636         unsigned int min_ipu_util;      /* in-place-update threshold */</div><div> 637         unsigned int min_fsync_blocks;  /* threshold for fsync */</div><div> 638</div><div> 639         /* for flush command control */</div><div> 640         <b>struct flush_cmd_control </b>*cmd_control_info;</div><div> 641</div><div> 642 };</div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div><div><br /></div></div></div></foreignObject><text x="250" y="310" fill="#000000" text-anchor="middle" font-size="14px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><rect x="0" y="3824" width="580" height="457" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(6.5,3831.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="516" height="446" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 451px; max-width: 566px; width: 517px; white-space: normal; word-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;"><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><b> 419 struct f2fs_inode_info {</b></div><div> 420         <b>struct</b> inode vfs_inode;         /* serve a vfs inode */</div><div> 421         unsigned long i_flags;          /* keep an inode flags for ioctl */</div><div> 422         unsigned char i_advise;         /* use to give file attribute hints */</div><div> 423         unsigned char i_dir_level;      /* use for dentry level for large dir */</div><div> 424         unsigned int i_current_depth;   /* use only in directory structure */</div><div> 425         unsigned int i_pino;            /* parent inode number */</div><div> 426         umode_t i_acl_mode;             /* keep file acl mode temporarily */</div><div> 427</div><div> 428         /* Use below internally in f2fs*/</div><div> 429         unsigned long flags;            /* use to pass per-file flags */</div><div> 430         <b>struct</b> rw_semaphore i_sem;      /* protect fi info */</div><div> 431         atomic_t dirty_pages;           /* # of dirty pages */</div><div> 432         f2fs_hash_t chash;              /* hash value of given file name */</div><div> 433         unsigned int clevel;            /* maximum level of given file name */</div><div> 434         struct task_struct *task;       /* lookup and create consistency */</div><div> 435         nid_t i_xattr_nid;              /* node id that contains xattrs */</div><div> 436         unsigned long long xattr_ver;   /* cp version of xattr modification */</div><div> 437         loff_t  last_disk_size;         /* lastly written file size */</div><div> 438</div><div> 439         <b>struct</b> list_head dirty_list;    /* dirty list for dirs and files */</div><div> 440         <b>struct</b> list_head gdirty_list;   /* linked in global dirty list */</div><div> 441         <b>struct</b> list_head inmem_pages;   /* inmemory pages managed by f2fs */</div><div> 442         <b>struct</b> mutex inmem_lock;        /* lock for inmemory pages */</div><div> 443         <b>struct extent_tree </b>*extent_tree;        /* cached extent_tree entry */</div><div> 444         <b>struct</b> rw_semaphore dio_rwsem[2];/* avoid racing between dio and gc */</div><div> 445 };</div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div><div><br /></div></div></div></foreignObject><text x="258" y="230" fill="#000000" text-anchor="middle" font-size="14px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><rect x="0" y="3318" width="580" height="476" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(6.5,3325.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="490" height="462" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 470px; max-width: 566px; width: 491px; white-space: normal; word-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;"><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><b> 507 struct f2fs_nm_info {</b></div><div> 508         block_t nat_blkaddr;            /* base disk address of NAT */</div><div> 509         nid_t max_nid;                  /* maximum possible node ids */</div><div> 510         nid_t available_nids;           /* maximum available node ids */</div><div> 511         nid_t next_scan_nid;            /* the next nid to be scanned */</div><div> 512         unsigned int ram_thresh;        /* control the memory footprint */</div><div> 513         unsigned int ra_nid_pages;      /* # of nid pages to be readaheaded */</div><div> 514         unsigned int dirty_nats_ratio;  /* control dirty nats ratio threshold */</div><div> 515</div><div> 516         /* NAT cache management */</div><div> 517         <b>struct</b> radix_tree_root nat_root;/* root of the nat entry cache */</div><div> 518         <b>struct</b> radix_tree_root nat_set_root;/* root of the nat set cache */</div><div> 519         <b>struct</b> rw_semaphore nat_tree_lock;      /* protect nat_tree_lock */</div><div> 520         struct list_head nat_entries;   /* cached nat entry list (clean) */</div><div> 521         unsigned int nat_cnt;           /* the # of cached nat entries */</div><div> 522         unsigned int dirty_nat_cnt;     /* total num of nat entries in set */</div><div> 523</div><div> 524         /* free node ids management */</div><div> 525         <b>struct</b> radix_tree_root free_nid_root;/* root of the free_nid cache */</div><div> 526         <b>struct</b> list_head free_nid_list; /* a list for free nids */</div><div> 527         spinlock_t free_nid_list_lock;  /* protect free nid list */</div><div> 528         unsigned int fcnt;              /* the number of free node id */</div><div> 529         <b>struct</b> mutex build_lock;        /* lock for build free nids */</div><div> 530</div><div> 531         /* for checkpoint */</div><div> 532         char *nat_bitmap;               /* NAT bitmap pointer */</div><div> 533         int bitmap_size;                /* bitmap size */</div><div> 534 };</div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div><div><br /></div></div></div></foreignObject><text x="245" y="238" fill="#000000" text-anchor="middle" font-size="14px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><rect x="6" y="7086" width="580" height="298" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(12.5,7093.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="492" height="286" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 292px; max-width: 566px; width: 493px; white-space: normal; word-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;"><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div> 536 /*</div><div> 537  * this structure is used as one of function parameters.</div><div> 538  * all the information are dedicated to a given direct node block determined</div><div> 539  * by the data offset in a file.</div><div> 540  */</div><div><b> 541 struct dnode_of_data {</b></div><div> 542         struct inode *inode;            /* vfs inode pointer */</div><div> 543         struct page *inode_page;        /* its inode page, NULL is possible */</div><div> 544         struct page *node_page;         /* cached direct node page */</div><div> 545         nid_t nid;                      /* node id of the direct node block */</div><div> 546         unsigned int ofs_in_node;       /* data offset in the node page */</div><div> 547         bool inode_page_locked;         /* inode page is locked or not */</div><div> 548         bool node_changed;              /* is node block changed */</div><div> 549         char cur_level;                 /* level of hole node page */</div><div> 550         char max_level;                 /* level of current page located */</div><div> 551         block_t data_blkaddr;           /* block address of the node block */</div><div> 552 };</div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div><div><br /></div></div></div></foreignObject><text x="246" y="150" fill="#000000" text-anchor="middle" font-size="14px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><rect x="6" y="6296" width="580" height="470" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(12.5,6303.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="566" height="462" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 464px; max-width: 566px; width: 566px; white-space: normal; word-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;"><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div> 564 /*</div><div><b> 565  * For SIT manager</b></div><div> 566  *</div><div> 567  * By default, there are 6 active log areas across the whole main area.</div><div> 568  * When considering hot and cold data separation to reduce cleaning overhead,</div><div> 569  * we split 3 for data logs and 3 for node logs as hot, warm, and cold types,</div><div> 570  * respectively.</div><div> 571  * In the current design, you should not change the numbers intentionally.</div><div> 572  * Instead, as a mount option such as active_logs=x, you can use 2, 4, and 6</div><div> 573  * logs individually according to the underlying devices. (default: 6)</div><div> 574  * Just in case, on-disk layout covers maximum 16 logs that consist of 8 for</div><div> 575  * data and 8 for node logs.</div><div> 576  */</div><div> 577 #define NR_CURSEG_DATA_TYPE     (3)</div><div> 578 #define NR_CURSEG_NODE_TYPE     (3)</div><div> 579 #define NR_CURSEG_TYPE  (NR_CURSEG_DATA_TYPE + NR_CURSEG_NODE_TYPE)</div><div> 580</div><div> 581 enum {</div><div> 582         CURSEG_HOT_DATA = 0,    /* directory entry blocks */</div><div> 583         CURSEG_WARM_DATA,       /* data blocks */</div><div> 584         CURSEG_COLD_DATA,       /* multimedia or GCed data blocks */</div><div> 585         CURSEG_HOT_NODE,        /* direct node blocks of directory files */</div><div> 586         CURSEG_WARM_NODE,       /* direct node blocks of normal files */</div><div> 587         CURSEG_COLD_NODE,       /* indirect node blocks */</div><div> 588         NO_CHECK_TYPE,</div><div> 589         CURSEG_DIRECT_IO,       /* to use for the direct IO path */</div><div> 590 };</div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div><div><br /></div></div></div></foreignObject><text x="283" y="238" fill="#000000" text-anchor="middle" font-size="14px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><rect x="2" y="6826" width="580" height="234" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(8.5,6833.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="511" height="222" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 228px; max-width: 566px; width: 512px; white-space: normal; word-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;"><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><b> 592 struct flush_cmd {</b></div><div> 593         struct completion wait;</div><div> 594         struct llist_node llnode;</div><div> 595         int ret;</div><div> 596 };</div><div> 597</div><div><b> 598 struct flush_cmd_control {</b></div><div> 599         struct task_struct *f2fs_issue_flush;   /* flush thread */</div><div> 600         wait_queue_head_t flush_wait_queue;     /* waiting queue for wake-up */</div><div> 601         atomic_t submit_flush;                  /* # of issued flushes */</div><div> 602         struct llist_head issue_list;           /* list for command issue */</div><div> 603         struct llist_node *dispatch_list;       /* list for command dispatch */</div><div> 604 };</div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div><div><br /></div></div></div></foreignObject><text x="256" y="118" fill="#000000" text-anchor="middle" font-size="14px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><rect x="6" y="7462" width="580" height="804" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(12.5,7469.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="528" height="782" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 798px; max-width: 566px; width: 529px; white-space: normal; word-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;"><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div> 370 /*</div><div> 371  * This structure is taken from ext4_map_blocks.</div><div> 372  *</div><div> 373  * Note that, however, f2fs uses NEW and MAPPED flags for f2fs_map_blocks().</div><div> 374  */</div><div> 375 #define F2FS_MAP_NEW            (1 &lt;&lt; BH_New)</div><div> 376 #define F2FS_MAP_MAPPED         (1 &lt;&lt; BH_Mapped)</div><div> 377 #define F2FS_MAP_UNWRITTEN      (1 &lt;&lt; BH_Unwritten)</div><div> 378 #define F2FS_MAP_FLAGS          (F2FS_MAP_NEW | F2FS_MAP_MAPPED |\</div><div> 379                                 F2FS_MAP_UNWRITTEN)</div><div> 380</div><div><b> 381 struct f2fs_map_blocks {</b></div><div> 382         block_t m_pblk;</div><div> 383         block_t m_lblk;</div><div> 384         unsigned int m_len;</div><div> 385         unsigned int m_flags;</div><div> 386         pgoff_t *m_next_pgofs;          /* point next possible non-hole pgofs */</div><div> 387 };</div><div> 388</div><div> 389 /* for flag in get_data_block */</div><div> 390 #define F2FS_GET_BLOCK_READ             0</div><div> 391 #define F2FS_GET_BLOCK_DIO              1</div><div> 392 #define F2FS_GET_BLOCK_FIEMAP           2</div><div> 393 #define F2FS_GET_BLOCK_BMAP             3</div><div> 394 #define F2FS_GET_BLOCK_PRE_DIO          4</div><div> 395 #define F2FS_GET_BLOCK_PRE_AIO          5</div><div> 396</div><div> 397 /*</div><div> 398  * i_advise uses FADVISE_XXX_BIT. We can add additional hints later.</div><div> 399  */</div><div> 400 #define FADVISE_COLD_BIT        0x01</div><div> 401 #define FADVISE_LOST_PINO_BIT   0x02</div><div> 402 #define FADVISE_ENCRYPT_BIT     0x04</div><div> 403 #define FADVISE_ENC_NAME_BIT    0x08</div><div> 404</div><div> 405 #define file_is_cold(inode)     is_file(inode, FADVISE_COLD_BIT)</div><div> 406 #define file_wrong_pino(inode)  is_file(inode, FADVISE_LOST_PINO_BIT)</div><div> 407 #define file_set_cold(inode)    set_file(inode, FADVISE_COLD_BIT)</div><div> 408 #define file_lost_pino(inode)   set_file(inode, FADVISE_LOST_PINO_BIT)</div><div> 409 #define file_clear_cold(inode)  clear_file(inode, FADVISE_COLD_BIT)</div><div> 410 #define file_got_pino(inode)    clear_file(inode, FADVISE_LOST_PINO_BIT)</div><div> 411 #define file_is_encrypt(inode)  is_file(inode, FADVISE_ENCRYPT_BIT)</div><div> 412 #define file_set_encrypt(inode) set_file(inode, FADVISE_ENCRYPT_BIT)</div><div> 413 #define file_clear_encrypt(inode) clear_file(inode, FADVISE_ENCRYPT_BIT)</div><div> 414 #define file_enc_name(inode)    is_file(inode, FADVISE_ENC_NAME_BIT)</div><div> 415 #define file_set_enc_name(inode) set_file(inode, FADVISE_ENC_NAME_BIT)</div><div> 416</div><div> 417 #define DEF_DIR_LEVEL           0</div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div><div><br /></div></div></div></foreignObject><text x="264" y="398" fill="#000000" text-anchor="middle" font-size="14px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><rect x="6" y="10178" width="580" height="960" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(12.5,10185.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="455" height="954" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 954px; max-width: 566px; width: 456px; white-space: normal; word-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;"><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><b> 139 struct cp_control {</b></div><div> 140         int reason;</div><div> 141         __u64 trim_start;</div><div> 142         __u64 trim_end;</div><div> 143         __u64 trim_minlen;</div><div> 144         __u64 trimmed;</div><div> 145 };</div><div> 146</div><div> 147 /*</div><div> 148  * For CP/NAT/SIT/SSA readahead</div><div> 149  */</div><div> 150 enum {</div><div> 151         META_CP,</div><div> 152         META_NAT,</div><div> 153         META_SIT,</div><div> 154         META_SSA,</div><div> 155         META_POR,</div><div> 156 };</div><div> 157</div><div> 158 /* for the list of ino */</div><div> 159 enum {</div><div> 160         ORPHAN_INO,             /* for orphan ino list */</div><div> 161         APPEND_INO,             /* for append ino list */</div><div> 162         UPDATE_INO,             /* for update ino list */</div><div> 163         MAX_INO_ENTRY,          /* max. list */</div><div> 164 };</div><div> 165</div><div><b> 166 struct ino_entry {</b></div><div> 167         struct list_head list;  /* list head */</div><div> 168         nid_t ino;              /* inode number */</div><div> 169 };</div><div> 170</div><div> 171 /* for the list of inodes to be GCed */</div><div><b> 172 struct inode_entry {</b></div><div> 173         struct list_head list;  /* list head */</div><div> 174         struct inode *inode;    /* vfs inode pointer */</div><div> 175 };</div><div> 176</div><div> 177 /* for the list of blockaddresses to be discarded */</div><div><b> 178 struct discard_entry {</b></div><div> 179         struct list_head list;  /* list head */</div><div> 180         block_t blkaddr;        /* block address to be discarded */</div><div> 181         int len;                /* # of consecutive blocks of the discard */</div><div> 182 };</div><div> 183</div><div><b> 184 struct bio_entry {</b></div><div> 185         struct list_head list;</div><div> 186         struct bio *bio;</div><div> 187         struct completion event;</div><div> 188         int error;</div><div> 189 };</div><div> 190</div><div> 191 /* for the list of fsync inodes, used only during recovery */</div><div><b> 192 struct fsync_inode_entry {</b></div><div> 193         struct list_head list;  /* list head */</div><div> 194         struct inode *inode;    /* vfs inode pointer */</div><div> 195         block_t blkaddr;        /* block address locating the last fsync */</div><div> 196         block_t last_dentry;    /* block address locating the last dentry */</div><div> 197 };</div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div><div><br /></div></div></div></foreignObject><text x="228" y="484" fill="#000000" text-anchor="middle" font-size="14px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><rect x="6" y="9206" width="580" height="916" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(12.5,9213.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="566" height="910" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 910px; max-width: 566px; width: 566px; white-space: normal; word-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;"><div><div><div> 235 #define F2FS_IOC_GETFLAGS               FS_IOC_GETFLAGS</div><div> 236 #define F2FS_IOC_SETFLAGS               FS_IOC_SETFLAGS</div><div> 237 #define F2FS_IOC_GETVERSION             FS_IOC_GETVERSION</div><div> 238</div><div> 239 #define F2FS_IOCTL_MAGIC                0xf5</div><div> 240 #define F2FS_IOC_START_ATOMIC_WRITE     _IO(F2FS_IOCTL_MAGIC, 1)</div><div> 241 #define F2FS_IOC_COMMIT_ATOMIC_WRITE    _IO(F2FS_IOCTL_MAGIC, 2)</div><div> 242 #define F2FS_IOC_START_VOLATILE_WRITE   _IO(F2FS_IOCTL_MAGIC, 3)</div><div> 243 #define F2FS_IOC_RELEASE_VOLATILE_WRITE _IO(F2FS_IOCTL_MAGIC, 4)</div><div> 244 #define F2FS_IOC_ABORT_VOLATILE_WRITE   _IO(F2FS_IOCTL_MAGIC, 5)</div><div> 245 #define F2FS_IOC_GARBAGE_COLLECT        _IO(F2FS_IOCTL_MAGIC, 6)</div><div> 246 #define F2FS_IOC_WRITE_CHECKPOINT       _IO(F2FS_IOCTL_MAGIC, 7)</div><div> 247 #define F2FS_IOC_DEFRAGMENT             _IO(F2FS_IOCTL_MAGIC, 8)</div><div> 248 #define F2FS_IOC_MOVE_RANGE             _IOWR(F2FS_IOCTL_MAGIC, 9,      \</div><div> 249                                                 struct f2fs_move_range)</div><div> 250</div><div> 251 #define F2FS_IOC_SET_ENCRYPTION_POLICY  FS_IOC_SET_ENCRYPTION_POLICY</div><div> 252 #define F2FS_IOC_GET_ENCRYPTION_POLICY  FS_IOC_GET_ENCRYPTION_POLICY</div><div> 253 #define F2FS_IOC_GET_ENCRYPTION_PWSALT  FS_IOC_GET_ENCRYPTION_PWSALT</div><div> 254</div><div> 255 /*</div><div> 256  * should be same as XFS_IOC_GOINGDOWN.</div><div> 257  * Flags for going down operation used by FS_IOC_GOINGDOWN</div><div> 258  */</div><div> 259 #define F2FS_IOC_SHUTDOWN       _IOR('X', 125, __u32)   /* Shutdown */</div><div> 260 #define F2FS_GOING_DOWN_FULLSYNC        0x0     /* going down with full sync */</div><div> 261 #define F2FS_GOING_DOWN_METASYNC        0x1     /* going down with metadata */</div><div> 262 #define F2FS_GOING_DOWN_NOSYNC          0x2     /* going down */</div><div> 263 #define F2FS_GOING_DOWN_METAFLUSH       0x3     /* going down with meta flush */</div><div> 264</div><div> 265 #if defined(__KERNEL__) &amp;&amp; defined(CONFIG_COMPAT)</div><div> 266 /*</div><div> 267  * ioctl commands in 32 bit emulation</div><div> 268  */</div><div> 269 #define F2FS_IOC32_GETFLAGS             FS_IOC32_GETFLAGS</div><div> 270 #define F2FS_IOC32_SETFLAGS             FS_IOC32_SETFLAGS</div><div> 271 #define F2FS_IOC32_GETVERSION           FS_IOC32_GETVERSION</div><div> 272 #endif</div></div><div><br /></div><div><br /></div><div><b><span> 274 struct f2fs_defragment {</span><br /></b></div><div> 275         u64 start;</div><div> 276         u64 len;</div><div> 277 };</div><div> 278</div><div><b> 279 struct f2fs_move_range {</b></div><div> 280         u32 dst_fd;             /* destination fd */</div><div> 281         u64 pos_in;             /* start position in src_fd */</div><div> 282         u64 pos_out;            /* start position in dst_fd */</div><div> 283         u64 len;                /* size to move */</div><div> 284 };<br /></div></div><div><br /></div></div></div></foreignObject><text x="283" y="462" fill="#000000" text-anchor="middle" font-size="14px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><rect x="0" y="4304" width="580" height="208" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(6.5,4311.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="290" height="190" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 202px; max-width: 566px; width: 291px; white-space: normal; word-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;"><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div> 286 /*</div><div> 287  * For INODE and NODE manager</div><div> 288  */</div><div> 289 /* for directory operations */</div><div><b> 290 struct f2fs_dentry_ptr {</b></div><div> 291         struct inode *inode;</div><div> 292         const void *bitmap;</div><div> 293         struct f2fs_dir_entry *dentry;</div><div> 294         __u8 (*filename)[F2FS_SLOT_LEN];</div><div> 295         int max;</div><div> 296 };</div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div><div><br /></div></div></div></foreignObject><text x="145" y="102" fill="#000000" text-anchor="middle" font-size="14px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><rect x="6" y="8327.5" width="580" height="840" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(12.5,8335.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="550" height="830" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 834px; max-width: 566px; width: 551px; white-space: normal; word-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;"><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div> 318 /*</div><div> 319  * XATTR_NODE_OFFSET stores xattrs to one node block per file keeping -1</div><div> 320  * as its node offset to distinguish from index node blocks.</div><div> 321  * But some bits are used to mark the node block.</div><div> 322  */</div><div> 323 #define XATTR_NODE_OFFSET       ((((unsigned int)-1) &lt;&lt; OFFSET_BIT_SHIFT) \</div><div> 324                                 &gt;&gt; OFFSET_BIT_SHIFT)</div><div> 325 enum {</div><div> 326         ALLOC_NODE,                     /* allocate a new node page if needed */</div><div> 327         LOOKUP_NODE,                    /* look up a node without readahead */</div><div> 328         LOOKUP_NODE_RA,                 /*</div><div> 329                                          * look up a node with readahead called</div><div> 330                                          * by get_data_block.</div><div> 331                                          */</div><div> 332 };</div></div><div><br /></div><div> 334 #define F2FS_LINK_MAX   0xffffffff      /* maximum link count per file */</div><div> 335</div><div> 336 #define MAX_DIR_RA_PAGES        4       /* maximum ra pages of dir */</div><div> 337</div><div> 338 /* vector size for gang look-up from extent cache that consists of radix tree */</div><div> 339 #define EXT_TREE_VEC_SIZE       64</div><div> 340</div><div> 341 /* for in-memory extent cache entry */</div><div> 342 #define F2FS_MIN_EXTENT_LEN     64      /* minimum extent length */</div><div> 343</div><div> 344 /* number of extent info in extent cache we try to shrink */</div><div> 345 #define EXTENT_CACHE_SHRINK_NUMBER      128</div><div> 346</div><div><b> 347 struct extent_info {</b></div><div> 348         unsigned int fofs;              /* start offset in a file */</div><div> 349         u32 blk;                        /* start block address of the extent */</div><div> 350         unsigned int len;               /* length of the extent */</div><div> 351 };</div><div> 352</div><div><b> 353 struct extent_node {</b></div><div> 354         struct rb_node rb_node;         /* rb node located in rb-tree */</div><div> 355         struct list_head list;          /* node in global extent list of sbi */</div><div> 356         <b>struct extent_info</b> ei;          /* extent info */</div><div> 357         <b>struct extent_tree</b> *et;         /* extent tree pointer */</div><div> 358 };</div><div> 359</div><div><b> 360 struct extent_tree {</b></div><div> 361         nid_t ino;                      /* inode number */</div><div> 362         <b>struct</b> rb_root root;            /* root of extent info rb-tree */</div><div> 363         <b>struct extent_node</b> *cached_en;  /* recently accessed extent node */</div><div> 364         <b>struct extent_info</b> largest;     /* largested extent info */</div><div> 365         <b>struct</b> list_head list;          /* to be used by sbi-&gt;zombie_list */</div><div> 366         rwlock_t lock;                  /* protect extent info rb-tree */</div><div> 367         atomic_t node_cnt;              /* # of extent node in rb-tree*/</div><div> 368 };</div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div><div><br /></div></div></div></foreignObject><text x="275" y="422" fill="#000000" text-anchor="middle" font-size="14px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><rect x="0" y="0" width="600" height="60" fill="#dae8fc" stroke="#6c8ebf" pointer-events="none"/><g transform="translate(6.5,9.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="408" height="40" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 15px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 54px; max-width: 586px; width: 409px; white-space: normal; word-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;"><blockquote style="margin: 0 0 0 40px ; border: none ; padding: 0px"><blockquote style="margin: 0 0 0 40px ; border: none ; padding: 0px"><blockquote style="margin: 0 0 0 40px ; border: none ; padding: 0px"><blockquote style="margin: 0 0 0 40px ; border: none ; padding: 0px"><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div style="text-align: center"><font style="font-size: 18px"><b>F2FS in-mem data structures<br />fs/f2fs/f2fs.h</b></font></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></blockquote></blockquote></blockquote></blockquote></div></div></foreignObject><text x="204" y="28" fill="#000000" text-anchor="middle" font-size="15px" font-family="Helvetica">[Not supported by viewer]</text></switch></g></g></svg>